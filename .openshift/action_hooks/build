#!/bin/bash
# This is a simple build script and will be executed on your CI system if 
# available.  Otherwise it will execute while your application is stopped
# before the deploy step.  This script gets executed directly, so it
# could be python, php, ruby, etc. 

set -e

# Choose version of OPenScholar to install
OPENSCHOLAR_RELEASE=3.11.1

# Explicitly point to a drush installation
DRUSH="${OPENSHIFT_DEPENDENCIES_DIR}/drush/drush"

#
# The PHP dir most be controlled by Drupal content
#
if [ -e "${OPENSHIFT_REPO_DIR}php" -a ! -h "${OPENSHIFT_REPO_DIR}php" ]
then
  echo "ERROR: The 'php' directory in your Git repo prevents Drupal from being installed.  Please remove 'php' and push again."
  exit 5
fi

DRUPAL_DIR=${OPENSHIFT_DATA_DIR}drupal
DRUPAL_SITE_DIR=${OPENSHIFT_DATA_DIR}sites

echo

# Drush settings
cat >$OPENSHIFT_HOMEDIR/.drush/drushrc.php <<EOF
<?php
  \$options['uri'] = \$_ENV['OPENSHIFT_APP_DNS'];
  \$options['root'] = \$_ENV['OPENSHIFT_REPO_DIR'].'php';
EOF

#
# If there is no current download of Drupal, create one.
#
if [ ! -d "${OPENSHIFT_DATA_DIR}downloads/current" ]
then
  mkdir -p ${OPENSHIFT_TMP_DIR}drupal

  echo "Download and install the latest stable version of Drupal"
  echo

  mkdir -p ${OPENSHIFT_DATA_DIR}downloads
  if ! ${DRUSH} dl drupal --destination=${OPENSHIFT_DATA_DIR}downloads --yes
  then
    echo "ERROR: Unable download and install Drupal."
    exit 7
  fi

  #
  # Link the /current symlink to the latest Drupal instance
  #
  rm -f ${OPENSHIFT_DATA_DIR}downloads/current
  LATEST=$(ls -1t ${OPENSHIFT_DATA_DIR}downloads | grep drupal | head -1)
  export DRUPAL_INSTALL_DIR="${OPENSHIFT_DATA_DIR}downloads/${LATEST}"
  ln -s ${LATEST} ${OPENSHIFT_DATA_DIR}downloads/current

  ls $DRUPAL_INSTALL_DIR

  mv $DRUPAL_INSTALL_DIR/sites $DRUPAL_INSTALL_DIR/sites.original

  #
  # Ensure there is a default health check
  #
  cp ${OPENSHIFT_REPO_DIR}.openshift/health_check.php ${DRUPAL_INSTALL_DIR}

  patch ${DRUPAL_INSTALL_DIR}/.htaccess < ${OPENSHIFT_REPO_DIR}.openshift/.htaccess.patch

  echo "Drupal installed to $DRUPAL_INSTALL_DIR"
  echo
else
  DRUPAL_INSTALL_DIR=$(readlink -f ${OPENSHIFT_DATA_DIR}downloads/current)
  echo "Drupal is already installed at $DRUPAL_INSTALL_DIR"
  echo
fi


#
# Download & Install OpenScholar
# 

if [ ! -d "${OPENSHIFT_DATA_DIR}downloads/openscholar-current" ]
then
  
  mkdir -p ${OPENSHIFT_TMP_DIR}openscholar

  echo "Download and install the latest stable version of OpenScholar"
  echo

  mkdir -p ${OPENSHIFT_DATA_DIR}downloads
  TGZ=SCHOLAR-${OPENSCHOLAR_RELEASE}.tar.gz
  
  if ! [ -r ${OPENSHIFT_DATA_DIR}downloads/${TGZ} ]; then
   (
    cd ${OPENSHIFT_DATA_DIR}downloads
    rm -f ${TGZ}
    wget https://github.com/openscholar/openscholar/archive/${TGZ} -O ${TGZ}
    tar xzvf ${TGZ}
    cd -
   )
  fi
  
  #
  # Link the /openscholar-current symlink to the latest copy of the code 
  #
  rm -f ${OPENSHIFT_DATA_DIR}downloads/openscholar-current
  LATEST=$(ls -1t ${OPENSHIFT_DATA_DIR}downloads | grep -v tar.gz | grep SCHOLAR | head -1)
  export OPENSCHOLAR_INSTALL_DIR="${OPENSHIFT_DATA_DIR}downloads/${LATEST}"

  echo "OpenScholar installed to $OPENSCHOLAR_INSTALL_DIR"

  ln -s ${LATEST} ${OPENSHIFT_DATA_DIR}downloads/openscholar-current

else
  OPENSCHOLAR_INSTALL_DIR=$(readlink -f ${OPENSHIFT_DATA_DIR}downloads/openscholar-current)
  echo "OpenScholar is already installed at $OPENSCHOLAR_INSTALL_DIR"
fi


  #
  # Build the OpenScholar profile
  #
  (
    echo "Building OpenScholar ..."
    cd ${OPENSCHOLAR_INSTALL_DIR}/openscholar

    if ! [ -r ./libraries/hopscotch ]; then
      ${DRUSH} make --no-core --contrib-destination drupal-org.make .
    fi

    curl -s https://getcomposer.org/installer | php
    rm -f composer.lock
    php composer.phar install --prefer-source
    cd ..
  )

  echo
  echo "OpenScholar successfully built in $OPENSCHOLAR_INSTALL_DIR"
  echo 

  # Copy unmakable contrib files
  (
    cp -R ${OPENSCHOLAR_INSTALL_DIR}/temporary/* ${OPENSCHOLAR_INSTALL_DIR}/openscholar/modules/contrib/
  )

  # iCalcreator cannot be downloaded via make because a temporary token is needed,
  # so we have the library inside os_events directory and we copy it to libraries.
  (
    cp -R ${OPENSCHOLAR_INSTALL_DIR}/openscholar/modules/os_features/os_events/iCalcreator/ ${OPENSCHOLAR_INSTALL_DIR}/openscholar/libraries/
  )

  # Build the ops profile
  (
    OPS_DIR=${OPENSHIFT_DATA_DIR}/ops
    [ -d ${OPS_DIR} ] || mkdir -p ${OPS_DIR}
    cd ${OPS_DIR}
    ${DRUSH} make --no-core --contrib-destination ${OPENSCHOLAR_INSTALL_DIR}/openscholar/os-ops.make .
    cd -
  )

  #
  # Add it into the drupal profiles
  #
  ln -s ${OPENSCHOLAR_INSTALL_DIR}/openscholar ${DRUPAL_INSTALL_DIR}/profiles/openscholar



echo

#
# Link the /sites directory (where Drupal stores modules and files)
# into the install dir in order to keep it easily accessible.
#/
if [ ! -d "$DRUPAL_SITE_DIR" ]
then
  cp -r $DRUPAL_INSTALL_DIR/sites.original $DRUPAL_SITE_DIR
  ln -sfn ../../sites $DRUPAL_INSTALL_DIR/sites
fi


#
# Ensure that the app-root/runtime/repo/php PHP directory points
# to a valid Drupal instance directory
#
ln -sfn ../../data/downloads/current ${OPENSHIFT_REPO_DIR}php
if [ ! -d "${OPENSHIFT_REPO_DIR}php" ]
then  
  echo "ERROR: Unable to link the PHP directory, as the current Drupal instance is not a valid directory."
  exit 8
fi
